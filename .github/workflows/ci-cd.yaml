name: CI-CD for the OpenAlchemy Editor

on:
  push:
    branches:
      - main

jobs:
  assets-seeds:
    runs-on: ubuntu-latest
    steps:
      - name: Get OpenAlchemy repo
        uses: actions/checkout@v2
        with:
          repository: jdkandersson/OpenAlchemy
      - name: Upload seed assets
        uses: actions/upload-artifact@v2
        with:
          name: assets-seed
          path: |
            examples/**/*example-spec.yml
            !**/*remote*/**

  api-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install pipenv
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
      - name: Cache pipenv
        id: cache-pipenv
        uses: actions/cache@v2
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}
      - name: Install dependencies
        working-directory: ./api
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: |
          pipenv install --dev
      - name: Run tests
        working-directory: ./api
        run: |
          pipenv run test

  api-build:
    runs-on: ubuntu-latest
    needs:
      - api-test
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install pipenv
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
      - name: create package
        working-directory: ./api
        run: |
          mkdir dist
          pipenv lock -r > requirements.txt
          pip install -r requirements.txt --target dist
          cp -r api.py app.py openapi library dist/
          cd dist
          zip -r api-deployment-package.zip .
      - name: Upload artifacts for release
        uses: actions/upload-artifact@v2
        with:
          name: lambda
          path: api/dist/api-deployment-package.zip

  api-deploy:
    runs-on: ubuntu-latest
    needs:
      - api-build
    steps:
      - uses: actions/checkout@v2
      - name: Set up Node
        uses: actions/setup-node@v1
        with:
          node-version: 14.x
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install dependencies
        working-directory: ./infrastructure
        run: npm install
      - name: Retrieve api deployment package
        uses: actions/download-artifact@v2
        with:
          name: lambda
          path: infrastructure/resources/
      - name: deploy
        working-directory: ./infrastructure
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "us-east-1"
          AWS_ACCOUNT: ${{ secrets.AWS_ACCOUNT }}
          AWS_OPEN_ALCHEMY_CERTIFICATE_ARN: ${{ secrets.AWS_OPEN_ALCHEMY_CERTIFICATE_ARN }}
        run: |
          npm run deploy:infrastructure

  production-test:
    runs-on: ubuntu-latest
    needs:
      - api-deploy
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install pipenv
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
      - id: cache-pipenv
        uses: actions/cache@v2
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/test/Pipfile.lock') }}
      - name: Install dependencies
        working-directory: ./test
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: |
          pipenv install --dev
      - name: Run tests
        working-directory: ./test
        run: |
          pipenv run test
