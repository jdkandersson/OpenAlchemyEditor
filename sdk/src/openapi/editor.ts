/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/spec/validate-managed': {
    post: operations['library.spec.validate_managed'];
  };
  '/spec/validate-un-managed': {
    post: operations['library.spec.validate_un_managed'];
  };
  '/artifact/calculate': {
    post: operations['library.artifact.calculate'];
  };
  '/seed': {
    get: operations['library.seed.get'];
  };
  '/seeds': {
    get: operations['library.seeds.list_'];
  };
  '/seeds/{seed_path}': {
    get: operations['library.seeds.get'];
  };
}

export interface operations {
  'library.spec.validate_managed': {
    parameters: {
      header: {
        'X-LANGUAGE': components['parameters']['Language'];
      };
    };
    requestBody: {
      'text/plain': components['schemas']['SpecValue'];
    };
    responses: {
      /**
       * The validation result
       */
      '200': {
        'application/json': components['schemas']['ValidationResponse'];
      };
    };
  };
  'library.spec.validate_un_managed': {
    parameters: {
      header: {
        'X-LANGUAGE': components['parameters']['Language'];
      };
    };
    requestBody: {
      'text/plain': components['schemas']['SpecValue'];
    };
    responses: {
      /**
       * The validation result
       */
      '200': {
        'application/json': components['schemas']['ValidationResponse'];
      };
    };
  };
  'library.artifact.calculate': {
    parameters: {
      header: {
        'X-LANGUAGE': components['parameters']['Language'];
      };
    };
    requestBody: {
      'text/plain': components['schemas']['SpecValue'];
    };
    responses: {
      /**
       * The artifacts
       */
      '200': {
        'application/json': components['schemas']['ArtifactResponse'];
      };
      /**
       * The spec is not valid
       */
      '400': {
        'text/plain': string;
      };
    };
  };
  'library.seed.get': {
    responses: {
      /**
       * The default seed
       */
      '200': {
        'text/plain': components['schemas']['SeedValue'];
      };
      /**
       * The default seed was not set
       */
      '500': {
        'text/plain': string;
      };
    };
  };
  'library.seeds.list_': {
    responses: {
      /**
       * All available seeds
       */
      '200': {
        'application/json': components['schemas']['Seed'][];
      };
    };
  };
  'library.seeds.get': {
    parameters: {
      path: {
        /**
         * The id of the seed, must be URL encoded
         */
        seed_path: components['schemas']['SeedPath'];
      };
    };
    responses: {
      /**
       * The seed value
       */
      '200': {
        'text/plain': components['schemas']['SeedValue'];
      };
      /**
       * The seed was not found
       */
      '404': {
        'text/plain': string;
        'application/problem+json': { [key: string]: any };
      };
    };
  };
}

export interface components {
  parameters: {
    /**
     * The language of the spec
     */
    Language: 'JSON' | 'YAML';
  };
  schemas: {
    /**
     * The name of a seed.
     */
    SeedName: string;
    /**
     * The path to a seed.
     */
    SeedPath: string;
    /**
     * Information about a seed
     */
    Seed: {
      name: components['schemas']['SeedName'];
      path: components['schemas']['SeedPath'];
    };
    /**
     * The value of a seed.
     */
    SeedValue: string;
    /**
     * The value of a spec.
     */
    SpecValue: string;
    /**
     * Whether the spec is valid at the global, model or property level
     */
    ValidationResponseResult: {
      /**
       * Whether the spec is valid
       */
      valid: boolean;
      /**
       * If the spec is not valid, the reason that it is not
       */
      reason?: string;
    };
    /**
     * The validation results for a property
     */
    ValidationResponseProperty: {
      result: components['schemas']['ValidationResponseResult'];
    };
    /**
     * The validation results for a model
     */
    ValidationResponseModel: {
      result: components['schemas']['ValidationResponseResult'];
      /**
       * The results for all properties, included if the model is valid at the model level
       */
      properties?: {
        [key: string]: components['schemas']['ValidationResponseProperty'];
      };
    };
    /**
     * The results for all models, included if the spec is valid at the global level
     */
    ValidationResponseModels: {
      [key: string]: components['schemas']['ValidationResponseModel'];
    };
    /**
     * The validation results for the spec
     */
    ValidationResponse: {
      result: components['schemas']['ValidationResponseResult'];
      models?: components['schemas']['ValidationResponseModels'];
    };
    /**
     * Keyword arguments
     */
    ArtifactResponseKwargs: { [key: string]: any };
    /**
     * A description for the model
     */
    ArtifactResponseDescription: string;
    /**
     * Whether a property is required
     */
    ArtifactResponseRequired: boolean;
    /**
     * Base for the definition of a property
     */
    ArtifactResponsePropertyBase: {
      type: 'SIMPLE' | 'JSON' | 'RELATIONSHIP' | 'BACKREF';
      required?: components['schemas']['ArtifactResponseRequired'];
      description?: components['schemas']['ArtifactResponseDescription'];
    };
    /**
     * The type for simple property
     */
    ArtifactResponsePropertySimpleOpenApiType: string;
    /**
     * The format for simple property
     */
    ArtifactResponsePropertySimpleOpenApiFormat: string;
    /**
     * The maxLength for simple property
     */
    ArtifactResponsePropertySimpleOpenApiMaxLength: number;
    /**
     * The nullable for simple property
     */
    ArtifactResponsePropertySimpleOpenApiNullable: boolean;
    /**
     * The default for simple property
     */
    ArtifactResponsePropertySimpleOpenApiDefault:
      | number
      | number
      | string
      | boolean;
    /**
     * The readOnly for simple property
     */
    ArtifactResponsePropertySimpleOpenApiReadOnly: boolean;
    /**
     * The writeOnly for simple property
     */
    ArtifactResponsePropertySimpleOpenApiWriteOnly: boolean;
    /**
     * The OpenAPI artifacts for a simple property
     */
    ArtifactResponsePropertySimpleOpenApi: {
      type: components['schemas']['ArtifactResponsePropertySimpleOpenApiType'];
      format?: components['schemas']['ArtifactResponsePropertySimpleOpenApiFormat'];
      max_length?: components['schemas']['ArtifactResponsePropertySimpleOpenApiMaxLength'];
      nullable?: components['schemas']['ArtifactResponsePropertySimpleOpenApiNullable'];
      default?: components['schemas']['ArtifactResponsePropertySimpleOpenApiDefault'];
      read_only?: components['schemas']['ArtifactResponsePropertySimpleOpenApiReadOnly'];
      write_only?: components['schemas']['ArtifactResponsePropertySimpleOpenApiWriteOnly'];
    };
    /**
     * The primary key for simple property
     */
    ArtifactResponsePropertySimpleExtensionPrimaryKey: boolean;
    /**
     * The autoincrement for simple property
     */
    ArtifactResponsePropertySimpleExtensionAutoincrement: boolean;
    /**
     * The index for simple property
     */
    ArtifactResponsePropertySimpleExtensionIndex: boolean;
    /**
     * The unique for simple property
     */
    ArtifactResponsePropertySimpleExtensionUnique: boolean;
    /**
     * The server default for simple property
     */
    ArtifactResponsePropertySimpleExtensionServerDefault: string;
    /**
     * The server foreign key for simple property
     */
    ArtifactResponsePropertySimpleExtensionForeignKey: string;
    /**
     * The extension artifacts for a simple property
     */
    ArtifactResponsePropertySimpleExtension: {
      primary_key: components['schemas']['ArtifactResponsePropertySimpleExtensionPrimaryKey'];
      autoincrement?: components['schemas']['ArtifactResponsePropertySimpleExtensionAutoincrement'];
      index?: components['schemas']['ArtifactResponsePropertySimpleExtensionIndex'];
      unique?: components['schemas']['ArtifactResponsePropertySimpleExtensionUnique'];
      server_default?: components['schemas']['ArtifactResponsePropertySimpleExtensionServerDefault'];
      foreign_key?: components['schemas']['ArtifactResponsePropertySimpleExtensionForeignKey'];
      kwargs?: components['schemas']['ArtifactResponseKwargs'];
      foreign_key_kwargs?: components['schemas']['ArtifactResponseKwargs'];
    };
    /**
     * The type for simple property
     */
    ArtifactResponsePropertySimpleType: 'SIMPLE';
    /**
     * The artifacts for a simple property
     */
    ArtifactResponsePropertySimple: components['schemas']['ArtifactResponsePropertyBase'] & {
      type: components['schemas']['ArtifactResponsePropertySimpleType'];
      open_api: components['schemas']['ArtifactResponsePropertySimpleOpenApi'];
      extension: components['schemas']['ArtifactResponsePropertySimpleExtension'];
      required: components['schemas']['ArtifactResponseRequired'];
    };
    /**
     * The OpenAPI artifacts for a json property
     */
    ArtifactResponsePropertyJsonOpenApi: {
      nullable?: components['schemas']['ArtifactResponsePropertySimpleOpenApiNullable'];
      read_only?: components['schemas']['ArtifactResponsePropertySimpleOpenApiReadOnly'];
      write_only?: components['schemas']['ArtifactResponsePropertySimpleOpenApiWriteOnly'];
    };
    /**
     * The extension artifacts for a Json property
     */
    ArtifactResponsePropertyJsonExtension: {
      primary_key: components['schemas']['ArtifactResponsePropertySimpleExtensionPrimaryKey'];
      index?: components['schemas']['ArtifactResponsePropertySimpleExtensionIndex'];
      unique?: components['schemas']['ArtifactResponsePropertySimpleExtensionUnique'];
      foreign_key?: components['schemas']['ArtifactResponsePropertySimpleExtensionForeignKey'];
      kwargs?: components['schemas']['ArtifactResponseKwargs'];
      foreign_key_kwargs?: components['schemas']['ArtifactResponseKwargs'];
    };
    /**
     * The type for Json property
     */
    ArtifactResponsePropertyJsonType: 'JSON';
    /**
     * The artifacts for a json property
     */
    ArtifactResponsePropertyJson: components['schemas']['ArtifactResponsePropertyBase'] & {
      type: components['schemas']['ArtifactResponsePropertyJsonType'];
      open_api: components['schemas']['ArtifactResponsePropertyJsonOpenApi'];
      extension: components['schemas']['ArtifactResponsePropertyJsonExtension'];
      required: components['schemas']['ArtifactResponseRequired'];
      schema?: { [key: string]: any };
    };
    /**
     * The type for a relationship
     */
    ArtifactResponsePropertyRelationshipBaseType: 'RELATIONSHIP';
    /**
     * The sub type for a relationship
     */
    ArtifactResponsePropertyRelationshipBaseSubType:
      | 'MANY_TO_ONE'
      | 'ONE_TO_ONE'
      | 'ONE_TO_MANY'
      | 'MANY_TO_MANY';
    /**
     * The parent for a relationship
     */
    ArtifactResponsePropertyRelationshipBaseParent: string;
    /**
     * The backref property for a relationship
     */
    ArtifactResponsePropertyRelationshipBaseBackrefProperty: string;
    /**
     * The base for all relationship artifacts
     */
    ArtifactResponsePropertyRelationshipBase: components['schemas']['ArtifactResponsePropertyBase'] & {
      type?: components['schemas']['ArtifactResponsePropertyRelationshipBaseType'];
      sub_type: components['schemas']['ArtifactResponsePropertyRelationshipBaseSubType'];
      parent: components['schemas']['ArtifactResponsePropertyRelationshipBaseParent'];
      backref_property?: components['schemas']['ArtifactResponsePropertyRelationshipBaseBackrefProperty'];
      kwargs?: components['schemas']['ArtifactResponseKwargs'];
      write_only?: components['schemas']['ArtifactResponsePropertySimpleOpenApiWriteOnly'];
      required: components['schemas']['ArtifactResponseRequired'];
    };
    /**
     * The sub type for a relationship that is not many to many
     */
    ArtifactResponsePropertyRelationshipNotManyToManySubType:
      | 'MANY_TO_ONE'
      | 'ONE_TO_ONE'
      | 'ONE_TO_MANY';
    /**
     * The foreign key property for a relationship that is not many to many
     */
    ArtifactResponsePropertyRelationshipNotManyToManyForeignKeyProperty: string;
    /**
     * The base for all not many-to-many relationship artifacts
     */
    ArtifactResponsePropertyRelationshipNotManyToMany: components['schemas']['ArtifactResponsePropertyRelationshipBase'] & {
      sub_type: components['schemas']['ArtifactResponsePropertyRelationshipNotManyToManySubType'];
      foreign_key: components['schemas']['ArtifactResponsePropertySimpleExtensionForeignKey'];
      foreign_key_property: components['schemas']['ArtifactResponsePropertyRelationshipNotManyToManyForeignKeyProperty'];
    };
    /**
     * The sub type for a relationship that is one to many
     */
    ArtifactResponsePropertyRelationshipOneToManySubType: 'ONE_TO_MANY';
    /**
     * The artifacts for a one to many relationship
     */
    ArtifactResponsePropertyRelationshipOneToMany: components['schemas']['ArtifactResponsePropertyRelationshipNotManyToMany'] & {
      sub_type: components['schemas']['ArtifactResponsePropertyRelationshipOneToManySubType'];
    };
    /**
     * The sub type for a relationship that is x to one
     */
    ArtifactResponsePropertyRelationshipXToOneSubType:
      | 'MANY_TO_ONE'
      | 'ONE_TO_ONE';
    /**
     * The artifacts for a x to one relationship
     */
    ArtifactResponsePropertyRelationshipXToOne: components['schemas']['ArtifactResponsePropertyRelationshipNotManyToMany'] & {
      sub_type: components['schemas']['ArtifactResponsePropertyRelationshipXToOneSubType'];
      nullable?: components['schemas']['ArtifactResponsePropertySimpleOpenApiNullable'];
    };
    /**
     * The sub type for a relationship that is many to one
     */
    ArtifactResponsePropertyRelationshipManyToOneSubType: 'MANY_TO_ONE';
    /**
     * The artifacts for a many to one relationship
     */
    ArtifactResponsePropertyRelationshipManyToOne: components['schemas']['ArtifactResponsePropertyRelationshipXToOne'] & {
      sub_type: components['schemas']['ArtifactResponsePropertyRelationshipManyToOneSubType'];
    };
    /**
     * The sub type for a relationship that is one to one
     */
    ArtifactResponsePropertyRelationshipOneToOneSubType: 'ONE_TO_ONE';
    /**
     * The artifacts for a one to one relationship
     */
    ArtifactResponsePropertyRelationshipOneToOne: components['schemas']['ArtifactResponsePropertyRelationshipXToOne'] & {
      sub_type: components['schemas']['ArtifactResponsePropertyRelationshipOneToOneSubType'];
    };
    /**
     * The sub type for a relationship that is many to many
     */
    ArtifactResponsePropertyRelationshipManyToManySubType: 'MANY_TO_MANY';
    /**
     * The secondary for a relationship that is many to many
     */
    ArtifactResponsePropertyRelationshipManyToManySecondary: string;
    /**
     * The artifacts for a many to many relationship
     */
    ArtifactResponsePropertyRelationshipManyToMany: components['schemas']['ArtifactResponsePropertyRelationshipBase'] & {
      sub_type: components['schemas']['ArtifactResponsePropertyRelationshipManyToManySubType'];
      secondary: components['schemas']['ArtifactResponsePropertyRelationshipManyToManySecondary'];
    };
    ArtifactResponsePropertyRelationship:
      | components['schemas']['ArtifactResponsePropertyRelationshipManyToOne']
      | components['schemas']['ArtifactResponsePropertyRelationshipOneToOne']
      | components['schemas']['ArtifactResponsePropertyRelationshipOneToMany']
      | components['schemas']['ArtifactResponsePropertyRelationshipManyToMany'];
    /**
     * The type for backref property
     */
    ArtifactResponsePropertyBackrefType: 'BACKREF';
    /**
     * The sub type for backref property
     */
    ArtifactResponsePropertyBackrefSubType: 'OBJECT' | 'ARRAY';
    /**
     * The artifacts for a backref property
     */
    ArtifactResponsePropertyBackref: components['schemas']['ArtifactResponsePropertyBase'] & {
      type: components['schemas']['ArtifactResponsePropertyBackrefType'];
      sub_type: components['schemas']['ArtifactResponsePropertyBackrefSubType'];
      properties: string[];
      schema: { [key: string]: any };
    };
    ArtifactResponsePropertyAll:
      | components['schemas']['ArtifactResponsePropertySimple']
      | components['schemas']['ArtifactResponsePropertyJson']
      | components['schemas']['ArtifactResponsePropertyRelationship']
      | components['schemas']['ArtifactResponsePropertyBackref'];
    /**
     * The artifacts for a property
     */
    ArtifactResponseProperty: {
      artifacts?: components['schemas']['ArtifactResponsePropertyAll'];
    };
    /**
     * The artifacts for the properties of a model
     */
    ArtifactResponseProperties: {
      [key: string]: components['schemas']['ArtifactResponseProperty'];
    };
    /**
     * The name of the table for the schema
     */
    ArtifactResponseModelTablename: string;
    /**
     * Whether the model inherits
     */
    ArtifactResponseModelInherits: boolean;
    /**
     * The name of the parent if the model inherits
     */
    ArtifactResponseModelParent: string;
    /**
     * Base classes mixed into the model
     */
    ArtifactResponseModelMixins: string[];
    /**
     * Index for the model
     */
    ArtifactResponseModelIndex: {
      expressions: string[];
      name?: string;
      unique?: boolean;
    };
    /**
     * Indexes for the model
     */
    ArtifactResponseModelCompositeIndex: components['schemas']['ArtifactResponseModelIndex'][];
    /**
     * Unique index for the model
     */
    ArtifactResponseModelUnique: { columns: string[]; name?: string };
    /**
     * Indexes for the model
     */
    ArtifactResponseModelCompositeUnique: components['schemas']['ArtifactResponseModelUnique'][];
    /**
     * The artifacts for a model
     */
    ArtifactResponseModelArtifacts: {
      tablename: components['schemas']['ArtifactResponseModelTablename'];
      inherits?: components['schemas']['ArtifactResponseModelInherits'];
      parent?: components['schemas']['ArtifactResponseModelParent'];
      description?: components['schemas']['ArtifactResponseDescription'];
      mixins?: components['schemas']['ArtifactResponseModelMixins'];
      kwargs?: components['schemas']['ArtifactResponseKwargs'];
      composite_index?: components['schemas']['ArtifactResponseModelCompositeIndex'];
      composite_unique?: components['schemas']['ArtifactResponseModelCompositeUnique'];
    };
    /**
     * The artifacts for a model
     */
    ArtifactResponseModel: {
      artifacts: components['schemas']['ArtifactResponseModelArtifacts'];
      properties?: components['schemas']['ArtifactResponseProperties'];
    };
    /**
     * The artifacts for all models
     */
    ArtifactResponseModels: {
      [key: string]: components['schemas']['ArtifactResponseModel'];
    };
    /**
     * The artifacts for the spec
     */
    ArtifactResponse: {
      models?: components['schemas']['ArtifactResponseModels'];
    };
  };
}
